//
// CHDL - Crappy Hardware Description Language
//
// digital circuits
//

requires adders; // file to import

global CpuWidth     : integer = 32;
global AddressWidth : integer = 16;
global ResetActive  : integer =  0; // active low reset

global GlString : string = "hi\s\s\s\s\sspaces";

module SignExtend(in_width : integer, out_width : integer, message : string)
    in: InPort[in_width];
    out: OutPort[out_width];
start

    local j : string = "Hello From String";

    println(
        "SignExtend\n", 
        "\tin_width = ", in_width, 
        "\n\tout_width = ", out_width);

    OutPort[{        0 :  in_width }] = InPort[{ 0 : in_width }]; // many-to-many, matching sizes
    OutPort[{ in_width : out_width }] = InPort[$];                // one-to-many, '$' is shorthand for 'last element'

end

// module TestBench_SignExtend(void)
//     header=empty;
// start
// 
//     //
//     // test 10-to-15 bit sign extension
//     //
//     local SignExtend se(10, 15);
// 
//     local i : integer = length(se.InPort);
// 
//     se.InPort[*]                = @'0b10_0000_0000'; // bit literal - multibit
//     simulate(); //                    |
//     assert(se.OutPort[*] == @'0b111_1110_0000_0000');
// 
//     local i : integer = cycles(); // cycles() returns the most recent number of simulation cycles the last simulation took to settle
// 
//     se.InPort[*]                = @'0b00_0000_0000';
//     simulate(); //                    |
//     assert(se.OutPort[*] == @'0b000_0000_0000_0000');
// 
//     clear $; // clears netlist, this destroys all currently simulated objects
//     clear *; // clears all local variables (variables in current module scope)
// 
//     //
//     // test 1-to-8 bit sign extension
//     //
//     local SignExtend se(1, 8);
// 
//     se.InPort[*] = @'1'; // bit literal - single bit
//     simulate();
//     assert(se.OutPort[*] == @'0b1111_1111');
// 
//     se.InPort[*] = @'0';
//     simulate();
//     assert(se.OutPort[*] == @'0b0000_0000');
// end


