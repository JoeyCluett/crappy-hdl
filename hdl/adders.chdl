
module adder(width : integer)
    in: cin, a[width/2], b[width];
    out: cout, sum[width];
start

    // vectors can hold arbitrary stuff, 0-indexed as God intended
    local vecstuff : vector = vector( 0, @1001, module.full_adder() );

    local adders: vector;
    ref current_cin = in.cin;

    local i : integer;
    for i = 0; i < width; i = i + 1; start
        push(adders, module.full_adder()); // push an instance of full_adder onto adders vector

        last(adders).cin = current_cin;
        last(adders).a   = in.a[i];
        last(adders).b   = in.b[i];

        out.sum[i]  = last(adders).sum;  // save output bit
        current_cin = last(adders).cout; // update carry for next adder
    end

    out.cout = current_cin;
end

module full_adder(void)
    in: cin, a, b;
    out: sum, cout;
start
    out.sum  = in.a ^ in.b ^ in.cin;
    out.cout = (in.a & in.b) | ((in.a ^ in.b) & in.cin);
end

//
// ripple carry adder
//

false
true
